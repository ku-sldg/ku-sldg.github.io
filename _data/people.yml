- name: Perry Alexander
  description: Formal methods; design languages; semantics; system-level design; component retrieval; and test vector generation. 
  role: faculty

- name: Evan Austin
  description: Verifying Haskell in Haskell using HaskHOL
  role: student

- name: Brigid Halling
  description: TPM formal specification and verification
  role: student

- name: Kayla Sale
  description: Static analusis of species niche models
  role: student

- name: Dr. Phillip Baraona
  description: VSPEC Formal Semantics - The syntax and semantics of the VSPEC specification language are described. A transformation from single and multi-component specifications to Larch Shared Language specifications is defined to provide language syntax. Component specifications are defined using the canonical axiomatic style extended to represent component activation. Interconnected components are modeled using CSP to model control.
  role: phd  

- name: Dr. John Penix
  description: Formal Component Retrieval and Architecture Representation - A technique for efficient, correct retrieval of components and a theory of architectures is presented. The component retrieval system combines faceted retrieval and specification matching. Facets are formally defined and extracted from component specifications using forward inference. Retrieval based on facets culls the solution space making specification matching feasible. Architecture theories are used to compose and adapt specifications.
  role: phd    

- name: Megan Peck
  description: Rosetta Composition Semantics - Developed a formal semantics for Rosetta component composition.  Each Rosetta model assumes a co-algebraic semantics, thus composition becomes composition of co-algebras.
  role: ms

- name: Brigid Halling
  description: Towards a Formal Model of the TPM - Developed a formal model of the TPM v1.2 using PVS.  Command execution sequencing is done using a state monad to thread state through a command sequence.  
  role: ms

- name: Justin Ward
  description: Polytypic Theorem Proving Framwork - The Prufrock (literary reference intended) polytypic theorem prover famework. Prufrock was developed to perform static anlaysis on Haskell and Rosetta source modules. It is a first-order theorem prover supporting rewriting and a proof scripting language.
  role: ug